#!/usr/bin/env bash

### Commentary:

# Abstracts the daily routine of
#   git checkout master && \
#   git pull && \
#   git checkout branchname && \
#   git merge master

# Is it good? Is it the best way? I don't know, works for me.

# See this Stack Overflow question for more insights and ideas
#     https://stackoverflow.com/questions/3216360/merge-update-and-pull-git-branches-without-using-checkouts

### Usage:

# For overview see the 'git_upd_help' function (or call it with 'git-update-branch -h').

### Code:

# NOTE: declare options (use 'help -m declare' to see all)
# -i : integer
# -r : readonly
# -a : array

## constants

# script name
declare -r GIT_UPD_SCRIPT_NAME=${0##*/}

# colors
declare -ir GIT_UPD_LOG_NEUTRAL_COLOR=3
declare -ir GIT_UPD_LOG_SUCCESS_COLOR=2
declare -ir GIT_UPD_LOG_FAIL_COLOR=1
declare -ir GIT_UPD_LOG_INFO_COLOR=5

# save state file
declare -r GIT_UPD_DOTGIT=$(git rev-parse --show-toplevel)
declare -r GIT_UPD_SAVE_STATE_FILE=$GIT_UPD_DOTGIT/.git/.git-update-branch

# defaults for usage in 'git_upd_help'
declare -r GIT_UPD_STRATEGY_DEFAULT=merge
declare -r GIT_UPD_SRC_BRANCH_DEFAULT=master

## variables

declare    GIT_UPD_STRATEGY=$GIT_UPD_STRATEGY_DEFAULT
declare    GIT_UPD_CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
declare    GIT_UPD_ORIGINAL_BRANCH=$GIT_UPD_CURRENT_BRANCH
declare    GIT_UPD_DST_BRANCH=$GIT_UPD_ORIGINAL_BRANCH    # destination
declare    GIT_UPD_SRC_BRANCH=$GIT_UPD_SRC_BRANCH_DEFAULT # source

declare -i GIT_UPD_STASH_DIFF=0
declare -a GIT_UPD_FAILED_STAGES=()
declare -i GIT_UPD_FAILED_STAGES_COUNT=0
declare -i GIT_UPD_STAGE_COUNT=1

git_upd_report(){
    local -r color=$1
    shift
    echo "$(tput setaf $color)$@$(tput sgr0)"
}

git_upd_report_info(){
    git_upd_report $GIT_UPD_LOG_INFO_COLOR "$@"
}

git_upd_report_success(){
    git_upd_report $GIT_UPD_LOG_SUCCESS_COLOR "$@"
}

git_upd_report_failure(){
    git_upd_report $GIT_UPD_LOG_FAIL_COLOR "$@"
}

git_upd_report_beg(){
    git_upd_report $GIT_UPD_LOG_NEUTRAL_COLOR "$GIT_UPD_STAGE_COUNT B [$@]"
}

git_upd_report_end(){
    local -r retcode=$?

    if [ $retcode -eq 0 ]; then
        git_upd_report_success "$GIT_UPD_STAGE_COUNT E [$@] : OK $retcode"
    else
        git_upd_report_failure "$GIT_UPD_STAGE_COUNT E [$@] : NOT OK $retcode"
        GIT_UPD_FAILED_STAGES[$GIT_UPD_FAILED_STAGES_COUNT]="$GIT_UPD_STAGE_COUNT [$@]"
        GIT_UPD_FAILED_STAGES_COUNT+=1
    fi
    GIT_UPD_STAGE_COUNT+=1
    echo

    return $retcode
}

git_upd_report_branches_and_strategy(){
    git_upd_report_info "STRATEGY: $GIT_UPD_STRATEGY"
    echo
    git_upd_report_info "BRANCHES"
    git_upd_report_info " -- ORIGINAL BRANCH:     $(tput setaf 15)$GIT_UPD_ORIGINAL_BRANCH"
    git_upd_report_info " ,- SOURCE BRANCH:       $(tput setaf 15)$GIT_UPD_SRC_BRANCH"
    git_upd_report_info " \`> DESTINATION BRANCH:  $(tput setaf 15)$GIT_UPD_DST_BRANCH"
    echo
}

git_upd_stash_save(){
    local -r stage_name="stash save"
    git_upd_report_beg $stage_name

    local -ri stash_before=$(git stash list | wc -l) &&
        git stash save "${GIT_UPD_SCRIPT_NAME}: tmp stash save on $(date +'%d.%m.%y %H:%M:%S')" &&
        local -ri stash_after=$(git stash list | wc -l) &&
        GIT_UPD_STASH_DIFF=$((stash_after - stash_before))

    git_upd_report_end $stage_name
}

git_upd_goto_branch(){
    local -r branch=$1
    if [ "$branch" == "$GIT_UPD_CURRENT_BRANCH" ]; then
        git_upd_report_info $branch is current
    else
        git checkout $branch &&
            GIT_UPD_CURRENT_BRANCH=$branch
    fi
}

git_upd_goto_src_branch(){
    local -r stage_name="switch to branch to update from - $GIT_UPD_SRC_BRANCH"
    git_upd_report_beg $stage_name

    git_upd_goto_branch $GIT_UPD_SRC_BRANCH

    git_upd_report_end $stage_name
}

git_upd_goto_dst_branch(){
    local -r stage_name="switch to branch to be updated - $GIT_UPD_DST_BRANCH"
    git_upd_report_beg $stage_name

    git_upd_goto_branch $GIT_UPD_DST_BRANCH

    git_upd_report_end $stage_name
}

git_upd_pull(){
    local -r stage_name="pull to $GIT_UPD_SRC_BRANCH"
    git_upd_report_beg $stage_name

    git pull

    git_upd_report_end $stage_name
}

_git_upd_save_state(){
    echo $GIT_UPD_STRATEGY \
         $GIT_UPD_CURRENT_BRANCH \
         $GIT_UPD_ORIGINAL_BRANCH \
         $GIT_UPD_DST_BRANCH \
         $GIT_UPD_SRC_BRANCH \
         $GIT_UPD_STASH_DIFF > $GIT_UPD_SAVE_STATE_FILE
}

git_upd_merge_or_rebase(){
    local -r stage_name="do: $GIT_UPD_STRATEGY ; from branch: $GIT_UPD_SRC_BRANCH ; to branch: $GIT_UPD_DST_BRANCH"
    git_upd_report_beg $stage_name

    if [ "$GIT_UPD_STRATEGY" == "merge" ]; then
        git merge --no-edit $GIT_UPD_SRC_BRANCH
    elif [ "$GIT_UPD_STRATEGY" == "rebase" ]; then
        git rebase $GIT_UPD_SRC_BRANCH
    else
        git_upd_report 9 "UNKNOWN STRATEGY, BRATAN"
        $(exit 99)
    fi

    local -r retcode=$?
    if [ $retcode != 0 ]; then
        git_upd_report_info "Error encountered."
        git_upd_report_info "Saving state to $GIT_UPD_SAVE_STATE_FILE."
        _git_upd_save_state
    fi
    $(exit $retcode)

    git_upd_report_end $stage_name
}

git_upd_goto_original_branch(){
    local -r stage_name="switch to original branch - $GIT_UPD_ORIGINAL_BRANCH"
    git_upd_report_beg $stage_name

    git_upd_goto_branch $GIT_UPD_ORIGINAL_BRANCH

    git_upd_report_end $stage_name
}

git_upd_stash_pop(){
    local -r stage_name="stash pop"
    git_upd_report_beg $stage_name

    if [ $GIT_UPD_STASH_DIFF -eq 0 ]; then
        git_upd_report_info Nothing was previously stashed so nothing is popped
    elif [ $GIT_UPD_STASH_DIFF -gt 0 ]; then
        git_upd_report_info 'popping...' && git stash pop -q
    else
        git_upd_report 9 "BRATAN, GIT_UPD_STASH_DIFF=$GIT_UPD_STASH_DIFF. WUT?"
        $(exit 99)
    fi

    git_upd_report_end $stage_name
}

git_upd_report_failureed_stages(){
    # local -r stage_name="git_upd_report failed stages"
    # git_upd_report_beg $stage_name

    git_upd_report_info "FAILED STAGES:"
    if [ $GIT_UPD_FAILED_STAGES_COUNT -eq 0 ]; then
        git_upd_report_success "- NONE$(tput sgr0)"
    else
        for ((i=0;i<$GIT_UPD_FAILED_STAGES_COUNT;i++)); do
            git_upd_report_failure "- ${GIT_UPD_FAILED_STAGES[$i]}$(tput sgr0)"
        done
    fi
    echo

    # git_upd_report_end $stage_name
}

git_upd_report_status(){
    git_upd_report_info "STATUS (-s -uno):"
    git_upd_report_info "- On branch $(tput setaf 15)$(git rev-parse --abbrev-ref HEAD)"
    if [ $(git status --short --untracked-files=no | wc -l) -gt 50 ]; then
        git_upd_report_info "- The command 'git status --short --untracked-files=no' gives more than 50 lines of output."
        git_upd_report_info "- Omitting them."
    else
        git_upd_report_info "---"
        git status --short --untracked-files=no
        git_upd_report_info "---"
    fi
}

git_upd_help(){
    echo 'NAME'
    echo "      git-update-branch â€” Abstracts the daily routine of 'git checkout master; git pull; git checkout branchname; git merge master'"
    echo
    echo 'SYNOPSIS'
    echo '      git-update-branch [-b|--branch DST_BRANCH] [-s|--strategy STRATEGY(merge|rebase)] [-f|--from SRC_BRANCH] [-c|--continue] [-h|--help]'
    echo
    echo 'DESCRIPTION'
    echo '      Updates SRC_BRANCH from remote (with "git pull"),'
    echo '      then "updates" DST_BRANCH from SRC_BRANCH using STRATEGY (merge or rebase).'
    echo "      By default DST_BRANCH is current, SRC_BRANCH is $GIT_UPD_SRC_BRANCH_DEFAULT and STRATEGY is $GIT_UPD_STRATEGY_DEFAULT."
    echo
    echo '      [ -c | --continue ]'
    echo '            Allows to safely continue after resolving merge conflict.'
    echo '            By safely I mean respecting the stash made on the original branch.'
    echo "            It does 'git commit', and returns to the original branch."
    echo "            If there was something stashed does 'git stash pop'."
    echo
    echo 'EXAMPLES'
    echo '      Command'
    echo '            git-update-branch -b my-feature-branch -f some-branch-dev -s merge'
    echo '      Description'
    echo "            Go to some-branch-dev, do 'git pull' on it,"
    echo "            go to my-feature-branch, do 'git merge some-branch-dev' on it,"
    echo '            return to original branch where git-update-branch was called.'
    echo
    echo '      Command'
    echo '            git-update-branch'
    echo '      Description'
    echo '            The most common use (at least for me) is just to call it without options.'
    echo '            This means it assumes that SRC_BRANCH is master and DST_BRANCH is the current branch.'
}

git_upd_finish(){
    git_upd_report_failureed_stages
    git_upd_report_status
}

git_upd_commit(){
    local -r stage_name="commit"
    git_upd_report_beg $stage_name

    git commit --no-edit

    git_upd_report_end $stage_name
}

git_upd_continue(){
    if [ -e $GIT_UPD_SAVE_STATE_FILE ]; then
        local -ar a=($(cat $GIT_UPD_SAVE_STATE_FILE))
        GIT_UPD_STRATEGY=${a[0]}
        GIT_UPD_CURRENT_BRANCH=${a[1]}
        GIT_UPD_ORIGINAL_BRANCH=${a[2]}
        GIT_UPD_DST_BRANCH=${a[3]}
        GIT_UPD_SRC_BRANCH=${a[4]}
        GIT_UPD_STASH_DIFF=${a[5]}
        git_upd_report_info 'CONTEXT OF SAVED STATE:'
        git_upd_report_info " - STRATEGY:         $GIT_UPD_STRATEGY"
        git_upd_report_info " - CURRENT BRANCH:   $GIT_UPD_CURRENT_BRANCH"
        git_upd_report_info " - BEANCH TO BRANCH: $GIT_UPD_DST_BRANCH"
        git_upd_report_info " - FROM BRANCH:      $GIT_UPD_SRC_BRANCH"
        echo

        git_upd_report_info 'IMPORTANT:'
        git_upd_report_info " - ORIGINAL BRANCH: $GIT_UPD_ORIGINAL_BRANCH"
        git_upd_report_info " - STASH DIFF:      $GIT_UPD_STASH_DIFF"
        echo

        local -r commit_editmsg=$GIT_UPD_DOTGIT/COMMIT_EDITMSG
        git_upd_report_info "CONTENTS OF $commit_editmsg"
        git_upd_report_info '---'
        cat $commit_editmsg
        git_upd_report_info '---'
        echo

        [ $GIT_UPD_STASH_DIFF -ne 0 ] &&
            git_upd_report_info "stash diff of value $GIT_UPD_STASH_DIFF means stash is going to be popped to the '$GIT_UPD_ORIGINAL_BRANCH' branch" ||
                git_upd_report_info "stash diff is $GIT_UPD_STASH_DIFF, so script is just going to checkout the '$GIT_UPD_ORIGINAL_BRANCH' branch"
        echo

        while true; do
            git_upd_report_info "do you want to continue updating after you have resolved the conflict? (y/n)"
            local yn
            read -p "$GIT_UPD_LOG_PREFIX $(tput setaf $GIT_UPD_LOG_INFO_COLOR)> " yn
            tput sgr0
            echo

            case ${yn,,} in
                y|yes)
                    git_upd_report_info "CONTINUING"
                    echo
                    git_upd_commit &&
                        git_upd_goto_original_branch &&
                        git_upd_stash_pop

                    git_upd_finish

                    rm $GIT_UPD_SAVE_STATE_FILE
                    break
                    ;;
                n|no)
                    git_upd_report_info "DO NOT CONTINUE"
                    break
                    ;;
                *)
                    git_upd_report_info "cmon, give me YES or NO"
                    echo
                    ;;
            esac
        done
    else
        git_upd_report_failure "No such file: $GIT_UPD_SAVE_STATE_FILE"
    fi
}

git_upd_handle_error(){
    local -r retcode=$1
    local -r handler=$2
    # call handler function
    $handler
    exit $retcode
}

git_upd_handler__stash_save(){
    git_upd_finish
}

git_upd_handler__goto_src_branch(){
    git_upd_stash_pop && git_upd_finish
}

git_upd_handler__pull(){
    git_upd_goto_original_branch && git_upd_stash_pop && git_upd_finish
}

git_upd_handler__goto_dst_branch(){
    git_upd_goto_original_branch && git_upd_stash_pop && git_upd_finish
}

git_upd_handler__merge_or_rebase(){
    git_upd_finish
}

git_update_branch(){
    # parse arguments
    while [[ $# -gt 0 ]]
    do
        case $1 in
            -b|--branch)
                GIT_UPD_DST_BRANCH=$2; shift; ;;
            -s|--strategy)
                GIT_UPD_STRATEGY=$2; shift; ;;
            -f|--from)
                GIT_UPD_SRC_BRANCH="$2"; shift; ;;
            -h|--help)
                git_upd_help; exit 0; ;;
            -c|--continue)
                git_upd_continue; return $? ;;
            *)
                # unknown options are ignored
                ;;
        esac
        shift # past argument or value
    done

    # stages

    git_upd_report_branches_and_strategy

    git_upd_stash_save      || git_upd_handle_error $? git_upd_handler__stash_save
    git_upd_goto_src_branch || git_upd_handle_error $? git_upd_handler__goto_src_branch
    git_upd_pull            || git_upd_handle_error $? git_upd_handler__pull
    git_upd_goto_dst_branch || git_upd_handle_error $? git_upd_handler__goto_dst_branch
    git_upd_merge_or_rebase || git_upd_handle_error $? git_upd_handler__merge_or_rebase

    git_upd_goto_original_branch && git_upd_stash_pop

    git_upd_finish
}

git_update_branch "$@"
